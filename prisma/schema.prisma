generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  paymentMethod String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  accounts      Account[]
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Address {
  id            String   @id @default(uuid())
  userId        String
  streetAddress String
  fullName      String
  city          String
  country       String
  postalCode    String
  phone         String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  orders        Order[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  slug          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]
  subcategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  slug       String    @unique
  categoryId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id            String           @id @default(uuid())
  name          String
  price         Float
  categoryId    String
  subCategoryId String?
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isFavorite    Boolean?         @default(false)
  cartItems     CartItem[]
  OrderItem     OrderItem[]
  category      Category         @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory?     @relation(fields: [subCategoryId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  size      String?
  color     String?
  stock     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, size, color])
}

model Cart {
  id            String     @id @default(uuid())
  userId        String     @unique
  itemsPrice    Float      @default(0)
  totalPrice    Float      @default(0)
  shippingPrice Float      @default(0)
  taxPrice      Float      @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  cartItems     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  size      String?
  color     String?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stock     Int?
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, size, color])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  addressId     String
  paymentMethod String
  status        String      @default("PENDING")
  totalAmount   Decimal?    @db.Decimal(12, 2)
  orderDate     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  itemsPrice    Decimal?    @db.Decimal(12, 2)
  shippingPrice Decimal?    @db.Decimal(12, 2)
  taxPrice      Decimal?    @db.Decimal(12, 2)
  address       Address     @relation(fields: [addressId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  name        String
  description String
  price       Float
  image       String
  quantity    Int
  size        String?
  productId   String?
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
}
